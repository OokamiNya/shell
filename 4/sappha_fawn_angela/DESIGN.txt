OWL:
Angela Lin, Fawn Wong, Sappha O'Meara
Period 4

FEATURES
----------------------------------------------------------------------------
	* Forks and executes commands!
	* Parses multiple commands (separated by semicolons) on one line!
	* Redirects using >, <!
	* Can make you almost forget you're not using bash!
	* Attempts to fight against User Silliness Syndrome! 'ls           -l' can't fight us!


ATTEMPTED FEATURES
----------------------------------------------------------------------------
	* Was unable to get 2> to redirect stderr to a new file
	* Was also unable to get 2>> to redirect stderr and append to a new file

BUGS
----------------------------------------------------------------------------
	* Multiple piping may or may not work...
	* cd past ~ breaks and cries

FILES AND FUNCTION HEADERS
==========================================================================

shell.c: where our fantastical magic begins!
	
	/*======== static void sighandler() ============
	Inputs:  int signo
	Returns: N/A	
	
	Our signal handler, where we specify the behavior of
	specific signals sent to our program:
		*SIGINT: exits the program
		
	==============================================*/


	/*======== int main() ==========================
	Inputs: N/A
	Returns: 0	
	
	Runs our function! Includes our specifications from 
	our signal handler and tells our shell to 
	continuously run until we call 'exit', 'quit', 
	or send the SIGINT signal to it.

	==============================================*/


	/*======== char * trim() =======================
	Inputs:  char *s
	Returns: Pointer to the beginning of a string.

	Removes leading and trailing whitespace on the string s.
	Terminating '\0' is placed at the appropriate new location by strndup.
	==============================================*/

	/*======== void printprompt() =======================
	Inputs:  N/A
	Returns: N/A

	Prints (to stdout) our shell's prompt, which is meant to mimic Linux's bash
	prompt. It is the concatenation of the user's username, :, and Linux-esque 
	pwd (~/stuff/substuff).
	
	For example...
	if username is 'unicorns', pwd is '/home/unicorns/Desktop'...
	our prompt will print 'unicorns:~/Desktop'

	==============================================*/ 

	/*======== void execute() =======================
	Inputs:  char a[256]
	Returns: N/A

	Executes a single command (ls -l | wc would be considered 
	one command in our case). First, we check for any type of
	redirection-esque commands (<, >, >>, |) and take care of those
	commands. If there are no redirection-esque commands, then we simply 
	parse on spaces. If our command is 'cd' or 'exit' or 'quit' then we
	cd, exit, or quit. Otherwise, we fork and let our child process execvp 
	and run the command. 

	==============================================*/ 


	/*================= void cd() =======================
	Inputs:  char* path
	Returns: N/A

	Changes our current working directory in a Linux-esque fashion:
	If not given any arguments, then change working directory to ~.
	Otherwise, it will change the current working directory to the 
	given argument or yell at you.
	
	==============================================*/ 

	/*======== char** parser() =======================
	Inputs:  N/A
	Returns: An array of strings, in which each element is a command
	to be executed.
	
	Takes the user input and parses along the semicolons (;), adding
	each element into the args array of strings. Then, we return this
	array of strings.	

	==============================================*/ 

	/*======== char* get_id() =======================
	Inputs:  N/A
	Returns: A string representing the currently-logged-in user's uid.

	A simple helper function which returns the current user's
	uid as a dynamically allocated string.

	==============================================*/ 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

redirect.c: home of our redirection functions
