Shell
by Adam DeHovitz, Malcolm Wells, Kyle Oleksiuk

Features:
	Forks and executes commands
	Parses multiple commands on one line using ';' (handles multiple ;)
	Ignores extra white space
	Redirects using >, <, >> (ls > hey.txt > yo.txt etc. is valid
	syntax)
	Changes Directories and exists
	Saves home direcory (HOME=<path from cur dir>)
	Pipes multi-arg commands (try "find . -type f -print | wc -l")
	SIGINT kills the running child process and not the whole
	terminal, if applicable

Attempted:
	Would have liked to account for "\ " char, or allow the user
	to insert a different character, but decided against implementation

Bugs:
	| needs white space
	
Files & Function Headers:
program.c
	Handles everything

	/*======== void process() ==========
	Inputs:  char *start	

	Takes in user input and breaks on ';' delimeter
	Processes each token
	====================*/

	/*======== void execute() ==========
	Inputs:  char *start
	
	Takes in user input and breaks it up by arguement into an
	array
	Sends array to appropriate function depending on nature of
	command
	====================*/

	/*======== void normal_process() ==========
	Inputs:  char * args[]

	Handles cd and exit commands
	====================*/

	/*======== void child_process() ==========
	Inputs:  char * args[]

	Creates a forked process that executes the command dicatate by
	args
	====================*/

	/*======== void redirect() ==========
	Inputs:  char * args[], int redir

	 Takes a char pointer array with command line input and int representing type of redirection
  	 Performs appropriate redirection depending on ">", "<", or ">>"
  	 Allows for <command> > <file1> > <file2> etc. if that's what you'd like
	====================*/

	/*======== void piping() ==========
	Inputs:  char * args[], int pipe

	 Takes a char pointer array with command line input and int
	 locating where "|" is in array 
	 Runs first commands and uses output as input to next command
	 Accounts for multiple arguements
	====================*/

	/*======== void set_home() ==========
	Inputs:  char *start

	sets global variable home using path from current directory
	Can be accessed with '~'
	====================*/
	
	/*======== void sighandler() ==========
	Inputs:  int signo

  	Takes the signal number
  	Only kills a process if it has no children
	====================*/
