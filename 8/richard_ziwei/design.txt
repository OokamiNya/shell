Cshell
by Richard Zhan and Ziwei Ye
//So I've been committing under the wrong email this entire time. I have only recently changed it. I hope you can still see my commits - Richard Zhan

Features:
	Forks and executes commands.Including git, emacs, vi and executeable programs.
	Semicolons.
	Redirection, > < >>.
	Single line pipe
	SIGINT kind of

Bugs:
	Multiline piping does not work
	Using ls in pipe in .../shell/8/richard_ziwei will give an extra file named dummy
	SIGINT will print ^C and will not reprint the prompt. Looks funky and unresponsive, but it works
	      		    
	
Files & Function Headers:
shell.c
	/*======== static void sighandler() ==========
	Inputs:  int signno; 
	Returns: Nothing

	It handles SIGINT by killing all child processes. *See bugs
	====================*/

	/*======== char dumb_exceptions() ==========
	Inputs:  char arg[]
	Returns: 0 or 1, depends on success or failure.

	Handles non-executable commands like cd and exit. Checks whether the first word is either cd and exit,
	and executes the according command. cd also has "~", the home shortcut implemented.
	====================*/

	/*======== void normal_stuff() ==========
	Inputs:  char arg[] 
	Returns: Nothing

	Forks a new fork, and execute arg in that environment by strseping the arguments and putting it in an array.
	 Execvp is then called on that array. If the said command doesn't exist, "invalid command" is printed.
	====================*/

	/*======== char pipe_it() ==========
	Inputs:  char arg[] 
	Returns: 0 or 1, depends on success or failure.

	Performs a pipe by writing into a dummy file (STDOUT) and reading in the dummy file (STDIN).
	====================*/

	/*======== char redirection() ==========
	Inputs:  char arg[] 
	Returns: 0 or 1, depends on success or failure.

	Implements redirection. If the character '>' '<' is found, a new fork is created where the two parameters are strseped
	 and the appropriate file descriptor is called. Also implements the ">>" redirection.
	====================*/

	/*======== int main() ==========
	Inputs:  char arg[] 
	Returns: 0.

	The main function. In an infinite loop, the current pathname is printed, and then it waits for input for a command.
	 It then cchecks the input in order for semicolons, cd & quit command, redirection symbols and execute them respectively.
	 Otherwise it executes the command.
	
	====================*/

helper.c
	/*======== char* strip ==========
	Inputs:  char arg[] 
	Returns:

	The new string without empty spaces on the end
	
	====================*/	
