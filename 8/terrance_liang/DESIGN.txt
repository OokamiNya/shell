CShell
by Terrance Liang

Features:
	Forks and executes commands
	Parses multiple commands in one line seperated by ;
	Redirects out using > and Redirects in using <
	Pipes using |
	Includes cd, you can return to home directory using "cd ~"	
	Really bad compsci joke about the beach and C

Attempted:
	Finding a better name for the program
	Considering the spaces for < > | and ;, but couldnt get strsep to
	work the way I wanted it to

Bugs:
	Commands using < > | ; will not work if there are spaces on either side.
	Will only work for examples like: cd ..;ls -al
	Reading the joke may cause a loss in brain cells

Function Headers under shell.c (handles everything):
	=====int countDelim()=====
	Inputs: char *stringy
		char delim
	Returns: Number of occurences of delim in stringy
	
	Counts the number of character delim's in string stringy
	==========================

	=====void execCommand()======
	Inputs: char* comm
	Returns: Nothing
	
	Counts number of occurences of spaces and parses them accordingly
	in order to execute the command with execvp
	Returns and prints errnos if there are any
	Note: the 2 errno is replaced with command not found
	instead of directory not found
	Should be done within a child process
	=============================

	=====char *getHomeDir()=====
	Inputs: None
	Returns: string of home directory

	Moves back a directory from current working directory
	Stops when the string of the userlogin is no longer in the cwd
	Reappends the userlogin and returns it
	============================

	=====void redirectOut()=====
	Inputs: char *output
		char *command
	Returns: Nothing
	
	Forks and redirects the output of the child process to string output
	The string command is then executed within the child process
	============================

	=====void redirectIn()=====
	Inputs: char *input
		char *command
	Returns: Nothing
	
	Forks and redirects the input of the child process to string input
	The string command is then executed within the child process
	===========================

	=====void mypipe()=====
	Inputs: char *incommand
		char *outcommand
	Returns: nothing
	
	Redirects the output for outcommand to a TempFile
	Then redirects the input for incommand to the TempFile
	The TempFile is then removed
	=======================
	
	=====void runCommand()====
	Inputs: char *comm
	Returns: Nothing

	This reads through all commands received through fget by shell()
	Will exit program for "exit" command
	Will change directories with "cd" command
	and can return to home directory with "cd ~" or "cd "
	If the command is neither "exit" nor "cd",
	then the function checks for "<" ">" or "|" for redirection and piping
	It then runs the appropriate commands with the appropriate parsing
	If it has neither of the symbols, then it forks accordingly
	and executes the command
	==========================

	=====void shell()=====
	Inputs: None
	Returns: Nothing
	
	This function is recalled at the end (runs forever theoretically)
	so that the program will remain "in the cshell"
	It prints username&computername followed by the 
	current working directory
	and a $ sign
	It then fgets the command made by the user
	It then checks the command for ; for multiple commands
	If there are multiple commands, then the fget is appropriately parsed
	and each subcommand will be executed at a time
	======================
	
	=====int main()=====
	Inputs: None
	Returns: 0
	
	Main function, run automatically
	Prints the terribly bad joke and then welcomes the user
	The shell() function is then run and the forever loop begins :)
	====================
